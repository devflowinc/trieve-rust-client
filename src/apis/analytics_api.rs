/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.10.9
 * Contact: developers@trieve.ai
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_all_queries`]
#[derive(Clone, Debug)]
pub struct GetAllQueriesParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get queries for.
    pub dataset_id: String,
    /// JSON request payload to filter the queries
    pub get_all_queries_request: models::GetAllQueriesRequest
}

/// struct for passing parameters to the method [`get_head_queries`]
#[derive(Clone, Debug)]
pub struct GetHeadQueriesParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get head queries for.
    pub dataset_id: String,
    /// JSON request payload to filter the analytics
    pub get_head_queries_request: models::GetHeadQueriesRequest
}

/// struct for passing parameters to the method [`get_latency_graph`]
#[derive(Clone, Debug)]
pub struct GetLatencyGraphParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get latency graph for.
    pub dataset_id: String,
    /// JSON request payload to filter the graph
    pub get_rps_graph_request: models::GetRpsGraphRequest
}

/// struct for passing parameters to the method [`get_low_confidence_queries`]
#[derive(Clone, Debug)]
pub struct GetLowConfidenceQueriesParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get low confidence queries for.
    pub dataset_id: String,
    /// JSON request payload to filter the analytics
    pub get_head_queries_request: models::GetHeadQueriesRequest
}

/// struct for passing parameters to the method [`get_overall_topics`]
#[derive(Clone, Debug)]
pub struct GetOverallTopicsParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get query clusters for.
    pub dataset_id: String
}

/// struct for passing parameters to the method [`get_queries_for_topic`]
#[derive(Clone, Debug)]
pub struct GetQueriesForTopicParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get query clusters for.
    pub dataset_id: String,
    /// The page number to get the queries for the topic
    pub page: i32,
    /// The id of the cluster you want to get queries for.
    pub cluster_id: String
}

/// struct for passing parameters to the method [`get_query`]
#[derive(Clone, Debug)]
pub struct GetQueryParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get the search for.
    pub dataset_id: String,
    /// The id of the search.
    pub search_id: String
}

/// struct for passing parameters to the method [`get_rag_queries`]
#[derive(Clone, Debug)]
pub struct GetRagQueriesParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get RAG queries for.
    pub dataset_id: String,
    /// JSON request payload to filter the graph
    pub get_rps_graph_request: models::GetRpsGraphRequest
}

/// struct for passing parameters to the method [`get_rag_usage`]
#[derive(Clone, Debug)]
pub struct GetRagUsageParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get RAG usage for.
    pub dataset_id: String
}

/// struct for passing parameters to the method [`get_rps_graph`]
#[derive(Clone, Debug)]
pub struct GetRpsGraphParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get RPS graph for.
    pub dataset_id: String,
    /// JSON request payload to filter the analytics
    pub get_rps_graph_request: models::GetRpsGraphRequest
}

/// struct for passing parameters to the method [`get_search_metrics`]
#[derive(Clone, Debug)]
pub struct GetSearchMetricsParams {
    /// The dataset id to use for the request
    pub tr_dataset: String,
    /// The id of the dataset you want to get search metrics for.
    pub dataset_id: String,
    /// JSON request payload to filter the analytics
    pub get_dataset_metrics_request: models::GetDatasetMetricsRequest
}


/// struct for typed successes of method [`get_all_queries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllQueriesSuccess {
    Status200(Vec<models::SearchQueryEvent>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_head_queries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetHeadQueriesSuccess {
    Status200(Vec<models::HeadQueries>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_latency_graph`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLatencyGraphSuccess {
    Status200(Vec<models::SearchLatencyGraph>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_low_confidence_queries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLowConfidenceQueriesSuccess {
    Status200(Vec<models::SearchQueryEvent>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_overall_topics`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOverallTopicsSuccess {
    Status200(models::SearchClusterTopics),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_queries_for_topic`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetQueriesForTopicSuccess {
    Status200(models::SearchQueryEvent),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_query`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetQuerySuccess {
    Status200(models::SearchQueryEvent),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_rag_queries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRagQueriesSuccess {
    Status200(Vec<models::GetRagQueriesRequest>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_rag_usage`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRagUsageSuccess {
    Status200(models::RagUsageResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_rps_graph`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRpsGraphSuccess {
    Status200(Vec<models::SearchRpsGraph>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_search_metrics`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSearchMetricsSuccess {
    Status200(models::DatasetAnalytics),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_queries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllQueriesError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_head_queries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetHeadQueriesError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_latency_graph`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLatencyGraphError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_low_confidence_queries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLowConfidenceQueriesError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_overall_topics`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOverallTopicsError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_queries_for_topic`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetQueriesForTopicError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_query`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetQueryError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_rag_queries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRagQueriesError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_rag_usage`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRagUsageError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_rps_graph`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRpsGraphError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_search_metrics`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSearchMetricsError {
    Status400(models::ErrorResponseBody),
    UnknownValue(serde_json::Value),
}


/// This route allows you to get all search queries and sort them.
pub async fn get_all_queries(configuration: &configuration::Configuration, params: GetAllQueriesParams) -> Result<ResponseContent<GetAllQueriesSuccess>, Error<GetAllQueriesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;
    let get_all_queries_request = params.get_all_queries_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/queries", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&get_all_queries_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetAllQueriesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetAllQueriesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This route allows you to get the most common queries for a dataset.
pub async fn get_head_queries(configuration: &configuration::Configuration, params: GetHeadQueriesParams) -> Result<ResponseContent<GetHeadQueriesSuccess>, Error<GetHeadQueriesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;
    let get_head_queries_request = params.get_head_queries_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/query/head", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&get_head_queries_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetHeadQueriesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetHeadQueriesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This route allows you to get the latency graph for a dataset.
pub async fn get_latency_graph(configuration: &configuration::Configuration, params: GetLatencyGraphParams) -> Result<ResponseContent<GetLatencyGraphSuccess>, Error<GetLatencyGraphError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;
    let get_rps_graph_request = params.get_rps_graph_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/latency", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&get_rps_graph_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetLatencyGraphSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetLatencyGraphError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This route allows you to get the queries that have the lowest confidence scores.
pub async fn get_low_confidence_queries(configuration: &configuration::Configuration, params: GetLowConfidenceQueriesParams) -> Result<ResponseContent<GetLowConfidenceQueriesSuccess>, Error<GetLowConfidenceQueriesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;
    let get_head_queries_request = params.get_head_queries_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/query/low_confidence", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&get_head_queries_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetLowConfidenceQueriesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetLowConfidenceQueriesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This route allows you to view the top 15 topics for a dataset based on the clustering of the queries in the dataset.
pub async fn get_overall_topics(configuration: &configuration::Configuration, params: GetOverallTopicsParams) -> Result<ResponseContent<GetOverallTopicsSuccess>, Error<GetOverallTopicsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/topics", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetOverallTopicsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetOverallTopicsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This route allows you to view the queries that are associated with a specific topic.
pub async fn get_queries_for_topic(configuration: &configuration::Configuration, params: GetQueriesForTopicParams) -> Result<ResponseContent<GetQueriesForTopicSuccess>, Error<GetQueriesForTopicError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;
    let page = params.page;
    let cluster_id = params.cluster_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/{cluster_id}/{page}", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id), page=page, cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetQueriesForTopicSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetQueriesForTopicError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This route allows you to view the details of a specific query.
pub async fn get_query(configuration: &configuration::Configuration, params: GetQueryParams) -> Result<ResponseContent<GetQuerySuccess>, Error<GetQueryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;
    let search_id = params.search_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/query/{search_id}", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id), search_id=crate::apis::urlencode(search_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetQuerySuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetQueryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_rag_queries(configuration: &configuration::Configuration, params: GetRagQueriesParams) -> Result<ResponseContent<GetRagQueriesSuccess>, Error<GetRagQueriesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;
    let get_rps_graph_request = params.get_rps_graph_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/rag", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&get_rps_graph_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetRagQueriesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetRagQueriesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_rag_usage(configuration: &configuration::Configuration, params: GetRagUsageParams) -> Result<ResponseContent<GetRagUsageSuccess>, Error<GetRagUsageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/rag/usage", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetRagUsageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetRagUsageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This route allows you to get the RPS graph for a dataset.
pub async fn get_rps_graph(configuration: &configuration::Configuration, params: GetRpsGraphParams) -> Result<ResponseContent<GetRpsGraphSuccess>, Error<GetRpsGraphError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;
    let get_rps_graph_request = params.get_rps_graph_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/rps", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&get_rps_graph_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetRpsGraphSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetRpsGraphError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This route allows you to get the search metrics for a dataset.
pub async fn get_search_metrics(configuration: &configuration::Configuration, params: GetSearchMetricsParams) -> Result<ResponseContent<GetSearchMetricsSuccess>, Error<GetSearchMetricsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tr_dataset = params.tr_dataset;
    let dataset_id = params.dataset_id;
    let get_dataset_metrics_request = params.get_dataset_metrics_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/analytics/{dataset_id}/metrics", local_var_configuration.base_path, dataset_id=crate::apis::urlencode(dataset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("TR-Dataset", tr_dataset.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&get_dataset_metrics_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetSearchMetricsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetSearchMetricsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

