/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.5
 * Contact: developers@trieve.ai
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChunkFilter {
    /// All of these field conditions have to match for the chunk to be included in the result set.
    #[serde(rename = "must", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub must: Option<Option<Vec<models::FieldCondition>>>,
    /// None of these field conditions can match for the chunk to be included in the result set.
    #[serde(rename = "must_not", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub must_not: Option<Option<Vec<models::FieldCondition>>>,
    /// Only one of these field conditions has to match for the chunk to be included in the result set.
    #[serde(rename = "should", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub should: Option<Option<Vec<models::FieldCondition>>>,
}

impl ChunkFilter {
    pub fn new() -> ChunkFilter {
        ChunkFilter {
            must: None,
            must_not: None,
            should: None,
        }
    }
}

