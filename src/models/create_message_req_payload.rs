/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.11.7
 * Contact: developers@trieve.ai
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateMessageReqPayload {
    /// If concat user messages query is set to true, all of the user messages in the topic will be concatenated together and used as the search query. If not specified, this defaults to false. Default is false.
    #[serde(rename = "concat_user_messages_query", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub concat_user_messages_query: Option<Option<bool>>,
    #[serde(rename = "filters", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Option<Box<models::ChunkFilter>>>,
    #[serde(rename = "highlight_options", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub highlight_options: Option<Option<Box<models::HighlightOptions>>>,
    #[serde(rename = "llm_options", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub llm_options: Option<Option<Box<models::LlmOptions>>>,
    /// The content of the user message to attach to the topic and then generate an assistant message in response to.
    #[serde(rename = "new_message_content")]
    pub new_message_content: String,
    /// Page size is the number of chunks to fetch during RAG. If 0, then no search will be performed. If specified, this will override the N retrievals to include in the dataset configuration. Default is None.
    #[serde(rename = "page_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub page_size: Option<Option<i64>>,
    /// Set score_threshold to a float to filter out chunks with a score below the threshold. This threshold applies before weight and bias modifications. If not specified, this defaults to 0.0.
    #[serde(rename = "score_threshold", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub score_threshold: Option<Option<f32>>,
    /// Query is the search query. This can be any string. The search_query will be used to create a dense embedding vector and/or sparse vector which will be used to find the result set. If not specified, will default to the last user message or HyDE if HyDE is enabled in the dataset configuration. Default is None.
    #[serde(rename = "search_query", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub search_query: Option<Option<String>>,
    #[serde(rename = "search_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub search_type: Option<Option<models::SearchMethod>>,
    /// The ID of the topic to attach the message to.
    #[serde(rename = "topic_id")]
    pub topic_id: uuid::Uuid,
    /// The user_id is the id of the user who is making the request. This is used to track user interactions with the RAG results.
    #[serde(rename = "user_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<Option<String>>,
}

impl CreateMessageReqPayload {
    pub fn new(new_message_content: String, topic_id: uuid::Uuid) -> CreateMessageReqPayload {
        CreateMessageReqPayload {
            concat_user_messages_query: None,
            filters: None,
            highlight_options: None,
            llm_options: None,
            new_message_content,
            page_size: None,
            score_threshold: None,
            search_query: None,
            search_type: None,
            topic_id,
            user_id: None,
        }
    }
}

