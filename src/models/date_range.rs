/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.10.9
 * Contact: developers@trieve.ai
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DateRange {
    #[serde(rename = "gt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gt: Option<Option<String>>,
    #[serde(rename = "gte", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gte: Option<Option<String>>,
    #[serde(rename = "lt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lt: Option<Option<String>>,
    #[serde(rename = "lte", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lte: Option<Option<String>>,
}

impl DateRange {
    pub fn new() -> DateRange {
        DateRange {
            gt: None,
            gte: None,
            lt: None,
            lte: None,
        }
    }
}

