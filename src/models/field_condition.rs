/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.8
 * Contact: developers@trieve.ai
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FieldCondition {
    /// Field is the name of the field to filter on. The field value will be used to check for an exact substring match on the metadata values for each existing chunk. This is useful for when you want to filter chunks by arbitrary metadata. To access fields inside of the metadata that you provide with the card, prefix the field name with `metadata.`.
    #[serde(rename = "field")]
    pub field: String,
    /// Match is the value to match on the field. The match value will be used to check for an exact substring match on the metadata values for each existing chunk. This is useful for when you want to filter chunks by arbitrary metadata.
    #[serde(rename = "match", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#match: Option<Option<Vec<models::MatchCondition>>>,
    #[serde(rename = "range", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub range: Option<Option<Box<models::Range>>>,
}

impl FieldCondition {
    pub fn new(field: String) -> FieldCondition {
        FieldCondition {
            field,
            r#match: None,
            range: None,
        }
    }
}

