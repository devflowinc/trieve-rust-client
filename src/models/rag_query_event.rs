/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.11.7
 * Contact: developers@trieve.ai
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RagQueryEvent {
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "dataset_id")]
    pub dataset_id: uuid::Uuid,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "rag_type")]
    pub rag_type: String,
    #[serde(rename = "results")]
    pub results: Vec<models::ChunkMetadataStringTagSet>,
    #[serde(rename = "search_id")]
    pub search_id: uuid::Uuid,
    #[serde(rename = "user_id")]
    pub user_id: String,
    #[serde(rename = "user_message")]
    pub user_message: String,
}

impl RagQueryEvent {
    pub fn new(created_at: String, dataset_id: uuid::Uuid, id: uuid::Uuid, rag_type: String, results: Vec<models::ChunkMetadataStringTagSet>, search_id: uuid::Uuid, user_id: String, user_message: String) -> RagQueryEvent {
        RagQueryEvent {
            created_at,
            dataset_id,
            id,
            rag_type,
            results,
            search_id,
            user_id,
            user_message,
        }
    }
}

